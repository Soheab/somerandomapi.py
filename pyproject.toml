[project]
name = "somerandomapi.py"
description = "An actively maintained wrapper for the somerandomapi API."
authors = [{ name = "Soheab_" }]
requires-python = ">=3.11"
keywords = [
    "https://some-random-api.com",
    "https://api.some-random-api.com",
    "some-random-api",
    "api",
    "somerandomapi",
    "random",
    "images",
    "fun",
    "discord",
    "discord.py",
    "generation",
    "rankcard",
    "canvas",
    "welcome",
    "free",
    "open-source",
    "asyncio",
    "aiohttp",
    "async",
    "wrapper",
]
license = "MPL-2.0"
license-files = ["LICENSE"]
dependencies = ["aiohttp>=3.10.0,<4.0.0"]
dynamic = ["version", "readme"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Natural Language :: English",
    "Typing :: Typed",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

[project.optional-dependencies]
docs = [
    "Sphinx>=8.2,<9",
    "furo>=2024.8,<2025",
    "sphinx-autodoc-typehints>=3.2,<4",
    "enum-tools[sphinx]>=0.13,<0.14",
]
dev = ["ruff==0.11.8"]


[tool.setuptools]
packages = [
    "somerandomapi",
    "somerandomapi.clients",
    "somerandomapi.internals",
    "somerandomapi.models",
    "somerandomapi.models.welcome",
    "somerandomapi.types",
]

[project.urls]
homepage = "https://github.com/Soheab/somerandomapi.py"
documentation = "https://somerandomapipy.readthedocs.io/"
repository = "https://github.com/Soheab/somerandomapi.py"


[tool.setuptools.dynamic]
version = { attr = "somerandomapi.__version__" }
readme = { file = ["README.rst"], content-type = "text/x-rst" }

[tool.pyright]
include = [
    "somerandomapi",
    "somerandomapi/types",
    "somerandomapi/clients",
    "somerandomapi/models",
    "somerandomapi/internals",
]
exclude = ["**/__pycache__", "_build", "build", "dist", "docs"]
reportUnnecessaryTypeIgnoreComment = "warning"
reportUnusedImport = "error"
pythonVersion = "3.11"
typeCheckingMode = "basic"
reportDuplicateImport = "warning"
reportDeprecated = "warning"
deprecateTypingAliases = true
deprecateTypingAliasesInTypeArguments = true

[tool.coverage.run]
omit = ["somerandomapi/types/*", "*/_types.py"]

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "@overload"]

[tool.isort]
profile = "black"

[tool.black]
line-length = 125

# https://beta.ruff.rs/docs/settings/
[tool.ruff]
fix = true # default: false
line-length = 125 # default: 88
include = [
    "somerandomapi",
    "somerandomapi/types",
    "somerandomapi/clients",
    "somerandomapi/models",
    "somerandomapi/internals",
]
exclude = ["**/__pycache__", "_build", "build", "dist", "docs"]
target-version = "py311"


[tool.ruff.lint]
preview = true
select = [
    "A",
    "ANN",
    "ASYNC",
    "B",
    "BLE",
    "C4",
    "COM",
    "DTZ",
    "E",
    "EM",
    "ERA",
    "F",
    "FA",
    "FBT",
    "FURB",
    "G",
    "I",
    "INP",
    "ISC",
    "NPY",
    "PD",
    "PERF",
    "PGH",
    "PIE",
    "PLC",
    "PLE",
    "PLW",
    "PTH",
    "PYI",
    "Q",
    "Q003",
    "RET",
    "RSE",
    "RUF",
    "S",
    "SIM",
    "SLOT",
    "T20",
    "TC",
    "TID",
    "TRY",
    "UP",
    "YTT",
    # "DOC",   # not in a bot, please
]
ignore = [
    "ANN001",   # who annoates cls
    "ANN401",
    "ASYNC109", # dpy commonly uses this parameter
    "COM812",
    "EM101",    # in this case this is okay
    "F401",
    "F402",
    "F403",
    "F405",
    "INP001",   # due to how I load modules this results in annoyances
    "PD011",    # this is not a numpy codebase
    "PERF203",
    "PLC0414",  # pyright ruling for `as` imports needed
    "Q000",
    "RUF001",
    "RUF009",
    "S101",     # assert is used for type checking in this codebase
    "SIM105",
    "TRY003",   # over-eager rule
    "TRY301",   # unrealistic rule
    "UP034",
    "UP038",
    "TC001",    # nah it doesn't have to go into TYPE_CHECKING
    "TC002",    # nah it doesn't have to go into TYPE_CHECKING
    "TC003",    # nah it doesn't have to go into TYPE_CHECKING
    "TID252",   # it's fine.
    "PIE790",   # this is a common pattern 
]
unfixable = [
    "E501", # line length handled in other ways by ruff format
    "ERA",  # Don't delete commented out code
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"


[tool.ruff.lint.isort]
case-sensitive = true               # default: false
combine-as-imports = true           # default: false 
force-sort-within-sections = true   # default: false
force-to-top = ["future", "typing"] # default: []
force-wrap-aliases = true           # default: false
#required-imports = ["from __future__ import annotations"] # default: []
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
] # default


[tool.ruff.lint.pydocstyle]
convention = "numpy"                    # default: none
ignore-decorators = ["typing.overload"] # default: []

[tool.ruff.lint.pylint]
max-args = 20 # default: 5 # lets not limit ourselves :)

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true # default: false


[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true   # default: false
ignore-fully-untyped = true # default: false
suppress-dummy-args = true  # default: false

[tool.ruff.lint.flake8-bandit]
check-typed-exception = true # default: false

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true # default: false

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports.banned-api]
# https://discuss.python.org/t/problems-with-typeis/55410/6
# https://discuss.python.org/t/problems-with-typeis/55410/46
# Until what can go into a TypeIs/TypeGuard changes, these are just dangerous.
"typing.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing.TypeGuard".msg = "TypeGuard is fundamentally unsafe"
"typing_extensions.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing_extensions.TypeGuard".msg = "TypeGuard is fundamentally unsafe"
